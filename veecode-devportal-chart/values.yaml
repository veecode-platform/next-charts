global:
  # -- The external hostname for your DevPortal instance (e.g. https://myportal.apps.vee.codes)
  host: devportal.localhost
  protocol: https
  dynamic:
    plugins:
      # VeeCode Homepage
      - package: '@veecode-platform/plugin-veecode-homepage-dynamic@0.1.9'
        disabled: false
        integrity: sha512-MFv33GyxK+0/BqnAKPvZjC8Iw9V6fgFdUwcTGlFiSZElRM/4ncf9LVc2wo+aC5h0kO2svIuQeXVjP5q2jPlUhg==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.plugin-veecode-homepage:
                dynamicRoutes:
                  - path: /
                    importName: VeecodeHomepagePage
                    config:
                      props:
                        width: 1500
                        height: 800
      # VeeCode GlobalHeader
      - package: '@veecode-platform/plugin-veecode-global-header-dynamic@0.1.4'
        disabled: false
        integrity: sha512-ldP0qC8Jd8AIC8DRnEuT1oQq6ELUxlm90gRAaUl3TEVoenrs8Wwxyb8TqgTiZNO5akhcA8tBMHDAugUYS9+yMg==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.plugin-veecode-global-header:
                mountPoints:
                  - mountPoint: application/header
                    inportName: VeecodeGlobalHeader
                    config:
                      position: above-sidebar
      # Github Workflows
      - package: '@veecode-platform/backstage-plugin-github-workflows-dynamic@0.1.0'
        disabled: true
        integrity: sha512-gdCO5aSVNs2gwAU6bx17Bdt34G5xtb8EXCoCDIeKTlG7/vIB8xzCIxPIiNVLWkAp6v8lw+kdnF25/3GceOhskQ==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.plugin-github-workflows-dynamic:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: GithubWorkflowsOverviewContent
                    config:
                      layout:
                        gridColumnEnd:
                          lg: 'span 8'
                          md: 'span 6'
                          xs: 'span 12'
                      if:
                        allOf:
                          - isGithubWorkflowsAvailable
                  - mountPoint: entity.page.ci/cards
                    importName: GithubWorkflowsTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf:
                          - isGithubAvailable
      # Gitlab Pipelines
      - package: '@veecode-platform/backstage-plugin-gitlab-pipelines-dynamic@0.1.0'
        disabled: true
        integrity: sha512-IPIfKbdShbUng8S9QygPWx9wmn7hbw1W6iAXZ4xZC9REN05IZWedWjawp1iipXfMG3oA9c3L4qAC7ztMftbEfQ==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.backstage-plugin-gitlab-pipelines-dynamic:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: GitlabPipelinesOverviewContent
                    config:
                      layout:
                        gridColumnEnd:
                          lg: 'span 8'
                          md: 'span 6'
                          xs: 'span 12'
                      if:
                        allOf:
                          - isGitlabJobsAvailable
                  - mountPoint: entity.page.ci/cards
                    importName: GitlabPipelinesTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf:
                          - isGitlabAvailable
      # Infracost
      - package: '@veecode-platform/backstage-plugin-infracost-dynamic@0.1.0'
        disabled: true
        integrity: sha512-zGOe18uSIYBApBigXu1T4LjEvfGOvr/W1fBAzdvMJE1q3QNOrpMi/bPXalSIQuS6KiWyX6ps/JF9IAcpZSbCNA==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.backstage-plugin-infracost-dynamic:
                entityTabs:
                  - path: /infracost
                    title: infracost
                    mountPoint: entity.page.infracost/cards
                    importName: InfracostTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf:
                          - isInfracostAvailable
      # Kubernetes GPT Analyzer
      - package: '@veecode-platform/backstage-plugin-kubernetes-gpt-analyzer-dynamic@0.1.0'
        disabled: true
        integrity: sha512-ZajRQmYkYcP7MJYva0PISqTqJ8+UDXJL2hxIAgYhprOPMzEqXMtze+/wvPAjcgl/nOuNt+Q+ZQNFRDqZ2BCQUg==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.backstage-plugin-kubernetes-gpt-analyzer-dynamic:
                mountPoints: 
                  - mountPoint: entity.page.overview/cards
                    importName: KubernetesGPTAnalyzerOverviewContent
                    config:
                      layout:
                        gridColumnEnd:
                          lg: 'span 4'
                          md: 'span 6'
                          xs: 'span 12'
                      if:
                        allOf:
                          - isKubernetesAvailable
                entityTabs:
                  - path: /kubernetes-gpt-analyzer
                    title: Kubernetes GPT
                    mountPoint: entity.page.kubernetes-gpt-analyzer
                    importName: KubernetesGPTAnalyzerTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf:
                          - isKubernetesAvailable
      # Zora OSS
      - package: '@veecode-platform/backstage-plugin-zora-oss-dynamic@0.1.0'
        disabled: true
        integrity: sha512-wayuoYWaOqp9neoRePEzo/qbBMKR3vBta/meOGdJ8+p6Ze4KjYWgXKjkKzsxSdmg2uYpDwgrAv/+gedmweJ9Xw==
        pluginConfig:
          dynamicPlugins:
            frontend:
              veecode-platform.backstage-plugin-zora-oss-dynamic:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: ZoraOverviewProjectContent
                    config:
                      layout:
                        gridColumnEnd:
                          lg: 'span 4'
                          md: 'span 6'
                          xs: 'span 12'
                      if:
                        allOf|anyOf|oneOf:
                          - isZoraProject
                entityTabs:
                  - path: /zora-project
                    title: Zora
                    mountPoint: entity.page.zora
                    importName: ZoraOSSProjectTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf|anyOf|oneOf:
                          - isZoraProject
                  - path: /zora-cluster
                    mountPoint: entity.page.zora
                    importName: ZoraOSSClusterTabContent
                    config:
                      layout:
                        gridColumn: '1 / -1'
                      if:
                        allOf|anyOf|oneOf:
                          - isZoraAvailable
                          - isKind: Cluster
                          - isGithubPullRequestsAvailable
createClusterRoles:
  enabled: true
upstream:
  enabled: true
  fullnameOverride: veecode-devportal
  serviceAccount:
    create: true
    name: veecode-devportal-sa
  postgresql:
    enabled: false
  diagnosticMode: 
    enabled: false
  backstage:
    replicas: 1
    command: []
    podSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      fsGroupChangePolicy: "OnRootMismatch"
    containerSecurityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: true
      seccompProfile:
        type: "RuntimeDefault"
    resources:
      limits:
        cpu: 900m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi
    startupProbe:
      # This gives enough time upon container startup before the liveness and readiness probes are triggered.
      # Giving (120s = initialDelaySeconds + failureThreshold * periodSeconds) to account for the worst case scenario.
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      initialDelaySeconds: 30
      timeoutSeconds: 4
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/readiness
        port: backend
        scheme: HTTP
      # initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 4
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      # initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 4
    image:
      pullPolicy: Always
      registry: docker.io
      repository: veecode/devportal
      tag: 1.0.16
    args:
      - "--config"
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml      
    extraVolumes:
      - name: app-config
        configMap:
          name: veecode-devportal-app-config
       #-- Ephemeral volume that will contain the dynamic plugins installed by the initContainer below at start.
      - name: dynamic-plugins-root
        emptyDir: {}
      # Volume that will expose the `dynamic-plugins.yaml` file from the `dynamic-plugins` config map.
      # The `dynamic-plugins` config map is created by the helm chart from the content of the `global.dynamic` field.
      - name: dynamic-plugins
        configMap:
          defaultMode: 420
          name: veecode-devportal-dynamic-plugins
          optional: true
      # Optional volume that allows exposing the `.npmrc` file (through a `dynamic-plugins-npmrc` secret)
      # to be used when running `npm pack` during the dynamic plugins installation by the initContainer.
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: '{{ printf "%s-dynamic-plugins-npmrc" .Release.Name }}'
      # Optional volume that allows adding a container registry `auth.json` file (through a `dynamic-plugins-registry-auth` secret)
      # to be used when installing plugins from secure container registries during the dynamic plugins installation by the initContainer.
      - name: dynamic-plugins-registry-auth
        secret:
          defaultMode: 416
          optional: true
          secretName: '{{ printf "%s-dynamic-plugins-registry-auth" .Release.Name }}'
      - name: npmcacache
        emptyDir: {}
      - name: temp
        emptyDir: {}
    extraVolumeMounts:
      - name: app-config
        mountPath: /opt/app-root/src/app-config.yaml
        subPath: app-config.yaml
      - name: dynamic-plugins-root
        mountPath: /opt/app-root/src/dynamic-plugins-root
      - name: temp
        mountPath: /tmp
    initContainers:
      - name: install-dynamic-plugins
        workingDir: /opt/app-root/src
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 2.5Gi
            ephemeral-storage: 5Gi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
        image: '{{- include "veecode.image" . }}:{{- include "veecode.tag" . }}'
        imagePullPolicy: Always
        command: ['./install-dynamic-plugins.sh', '/dynamic-plugins-root'] 
        env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
        volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          # Optional mount of the `.npmrc` file to be used when installing dynamic plugins.
          # This allows using private npm registries when installing dynamic plugins.
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
          - mountPath: /opt/app-root/src/.config/containers
            name: dynamic-plugins-registry-auth
            readOnly: true
          - mountPath: /opt/app-root/src/.npm/_cacache
            name: npmcacache
          - name: temp
            mountPath: /tmp
    installDir: /opt/app-root/src
    appConfig:
      app:
        title: "Devportal Platform"
        baseUrl: '{{- include "veecode.protocol" . }}://{{- include "veecode.hostname" . }}'
        branding:
          fullLogo: https://veecode-platform.github.io/support/logos/logo.svg
          fullLogoDark: https://veecode-platform.github.io/support/logos/logo-black.svg
          iconLogo: https://veecode-platform.github.io/support/logos/logo-mobile.png
          theme:
            light:
              primaryColor: '#202020'
              headerColor1: '#45556D'
              headerColor2: '#86F4CE'
              navigationIndicatorColor: '#86F4CE'
            dark:
              primaryColor: '#cdcdcd'
              headerColor1: '#45556D'
              headerColor2: '#86F4CE'
              navigationIndicatorColor: '#86F4CE'
        support: #default veecode support discussions
          url: https://github.com/veecode-platform/support/discussions 
          items: 
            - title: Issues
              icon: github
              links:
                - url: https://github.com/veecode-platform/support/discussions
                  title: GitHub Issues
      backend:
        baseUrl: '{{- include "veecode.protocol" . }}://{{- include "veecode.hostname" . }}'
        listen:
          port: 7007
        database:
          client: better-sqlite3
          connection: ':memory:'
          #client: pg
          #pluginDivisionMode: schema
          #connection:
          #  host: host
          #  port: 5432
          #  database: database
          #  user: postgres
          #  password: password
        cors:
          #origin: app base url
          baseUrl: '{{- include "veecode.protocol" . }}://{{- include "veecode.hostname" . }}'
          methods: [GET, POST, PUT, DELETE, PATCH]
          credentials: true
        csp:
          connect-src: ["'self'","http:","https:"]
          img-src: ["'self'","data:","https://raw.githubusercontent.com/","https://avatars.githubusercontent.com/","https://veecode-platform.github.io","https://platform.vee.codes"]
          script-src: ["'self'","'unsafe-eval'","https://www.google-analytics.com","https://www.googletagmanager.com"]
        reading:
          allow:
            - host: example.com
            - host: "*.mozilla.org"
      organization:
        name: veecode
      permission:
        enabled: false
        rbac:
          pluginsWithPermission:
            - catalog
            - scaffolder
            - permission
            - kubernetes
            - vee
            - kong
            - veecode-platform-permissions-hub
          admin:
            superUsers:
              - name: user:default/admin
            users:
              - name: group:default/admin
      techdocs:
        builder: "local"
        generator:
          runIn: "local"
        publisher:
          type: "local"                    
      catalog:
        orphanStrategy: "delete"
        rules:
          - allow: ["Component","API","Location","Cluster","Template","Group","User","Environment","Vault","Infracost","Vulnerabilities","Database"]
        providers:
          infracost:
            default: 
              schedule:    
                frequency:
                  minutes: 60
                timeout:
                  minutes: 3
                initialDelay:
                  seconds: 1
      #search: should be enabled using a database
      #  pg:
      #    highlightOptions:
      #      useHighlight: true
      #      maxWord: 35
      #      minWord: 15
      #      shortWord: 3
      #      highlightAll: false
      #      maxFragments: 0
      #      fragmentDelimiter:  ... 
      #    schedule:        
      #      frequency: 
      #        minutes: 3
      #      timeout: 
      #        minutes: 5
      platform:
        signInProviders:
          - "github"
        guest:
          enabled: false
          demo: false
        enabledPlugins:
          vault: false
          grafana: false
          argocd: false
          gitlabPlugin: false
          keycloak: false
          azureDevops: false
          infracost: false
          kong: false
          vee: false
          sonarqube: false
          gitlab: false
          github: true